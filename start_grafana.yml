- hosts: grafana_servers
  tags:
    - grafana
  roles:
    - { role: grafana, grafana_exec_vars_only: true }
  tasks:
    - name: start grafana by supervise
      shell: cd {{ deploy_dir }}/scripts && ./start_{{ item }}.sh
      when: process_supervision == 'supervise'
      with_items:
        - grafana

    - name: start grafana by systemd
      systemd: name=grafana-{{ grafana_port }}.service state=started enabled=no
      when: process_supervision == 'systemd'
      become: true

    - name: wait for grafana up
      wait_for: |
        host={{ ansible_host }} port={{ grafana_port }} state=present
        send='GET /login HTTP/1.0\r\n\r\n' search_regex='200 OK'

    - name: start grafana_collector by supervise
      shell: cd {{ deploy_dir }}/scripts && ./start_{{ item }}.sh
      when: process_supervision == 'supervise'
      with_items:
        - grafana_collector

    - name: start grafana_collector by systemd
      systemd: name=grafana_collector-{{ grafana_collector_port }}.service state=started enabled=no
      when: process_supervision == 'systemd'
      become: true

    - name: wait for grafana_collector up
      wait_for: |
        host={{ ansible_host }} port={{ grafana_collector_port }} state=present

    - set_fact:
        grafana_host: "{{ ansible_host }}"

    - include_tasks: create_grafana_api_keys.yml

    - name: import grafana data source
      shell: >
        chdir={{ grafana_data_dir }}
        warn=no
        curl -q -X POST -d @data_source.json --header 'Content-Type: application/json'
        "http://{{ grafana_admin_user }}:{{ grafana_admin_password }}@127.0.0.1:{{ grafana_port }}/api/datasources"

    - name: import grafana dashboards - prepare config
      delegate_to: localhost
      template: src=grafana.dest.json.j2 dest={{ playbook_dir }}/scripts/dests.json
      vars:
        - ansible_become: false
        - ansible_connection: local
        - grafana_dest_config:
            name: "{{ cluster_name | title }}"
            url: "http://{{ grafana_host }}:{{ grafana_port }}/"
            report_url: "http://{{ grafana_host }}:{{ grafana_collector_port }}/"
            user: "{{ grafana_admin_user }}"
            password: "{{ grafana_admin_password }}"
            apikey: "{{ lookup('file', grafana_api_keys_dir + '/grafana_apikey.key') }}"
            datasource: "{{ cluster_name }}"
            titles:
              node: "{{ cluster_name | title }}-Node_exporter"
              pd:   "{{ cluster_name | title }}-PD"
              tidb: "{{ cluster_name | title }}-TiDB"
              tikv: "{{ cluster_name | title }}-TiKV"
              tikv_instances: "{{ cluster_name | title }}-TiKV-Instances"
              binlog: "{{ cluster_name | title }}-Binlog"
              overview: "{{ cluster_name | title }}-Overview"
              disk_performance: "{{ cluster_name | title }}-Disk-Performance"
              blackbox_exporter: "{{ cluster_name | title }}-Blackbox_exporter"
              kafka_overview: "{{ cluster_name | title }}-Kafka-Overview"

    - name: import grafana dashboards - run import script
      delegate_to: localhost
      shell: >-
        chdir={{ playbook_dir }}/scripts
        ./grafana-config-copy.py
      vars:
        - ansible_become: false
        - ansible_connection: local
